# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
from KrestikiNoliki import NUM_SQUARES, EMPTY

maps = [1, 2, 3,
        4, 5, 6,
        7, 8, 9,
        "‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï",
        "|"]

# –í—ã–≤–æ–¥ –ø–æ–±–µ–¥–Ω—ã—Ö –ª–∏–Ω–∏–π
victory = [[0, 1, 2],
           [3, 4, 5],
           [6, 7, 8],
           [0, 3, 6],
           [1, 4, 7],
           [2, 5, 8],
           [0, 4, 8],
           [2, 4, 6]]


# –í—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
def print_maps():
    print(maps[9])

    print(maps[0], end=" ")
    print(maps[10], end=" ")
    print(maps[1], end=" ")
    print(maps[10], end=" ")
    print(maps[2])

    print(maps[3], end=" ")
    print(maps[10], end=" ")
    print(maps[4], end=" ")
    print(maps[10], end=" ")
    print(maps[5])

    print(maps[6], end=" ")
    print(maps[10], end=" ")
    print(maps[7], end=" ")
    print(maps[10], end=" ")
    print(maps[8])

    print(maps[9])


# –§—É–Ω–∫—Ü–∏—è —Ö–æ–¥–∞ –≤ —è—á–µ–π–∫–∏
def move_maps(move, value):
    ind = maps.index(move)
    maps[ind] = value


# –Ø–¥—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã
game_over = False
player1 = True


# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
def get_result():
    win = ""

    for i in victory:
        if maps[i[0]] == "‚òí" and maps[i[1]] == "‚òí" and maps[i[2]] == "‚òí":
            win = "–ò–≥—Ä–æ–∫ 1"
        if maps[i[0]] == "üÑæ" and maps[i[1]] == "üÑæ" and maps[i[2]] == "üÑæ":
            win = "–ò–≥—Ä–æ–∫ 2"

    return win


while game_over == False:

    # –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
    print_maps()

    # –§—É–Ω–∫—Ü–∏—è, –≤–æ–ø—Ä–æ—Å–∞ —Ö–æ–¥–∞
    if player1:
        value = "‚òí"
        move = int(input("–ò–≥—Ä–æ–∫ 1, –≤–∞—à —Ö–æ–¥: "))
    else:
        value = "üÑæ"
        move = int(input("–ò–≥—Ä–æ–∫ 2, –≤–∞—à —Ö–æ–¥: "))

    move_maps(move, value)  # –¥–µ–ª–∞–µ–º —Ö–æ–¥ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
    win = get_result()  # –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if win != "":
        game_over = True
    else:
        game_over = False

    player1 = not (player1)


def error_step(maps, player1):
    legal = legal_moves(maps)
    step = None
    while step not in legal:
        if step not in legal:
            print("\n–î–∞–Ω–Ω–æ–π –ø–æ–ª–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–∏—Ä–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ\n")
    print("–•–æ—Ä–æ—à–æ.....")
    return step


def legal_moves(board):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ """
    moves = []
    for square in range(NUM_SQUARES):
        if board[square] == EMPTY:
            moves.append(square)
    return moves


# –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
print_maps()
print("–ü–æ–±–µ–¥–∏–ª", win)
